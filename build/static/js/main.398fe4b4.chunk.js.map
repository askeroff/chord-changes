{"version":3,"sources":["common/chord-manager.js","components/Chord.js","components/Header.js","components/Timer.js","App.js","registerServiceWorker.js","index.js"],"names":["chordsManager","ChordsManager","Object","classCallCheck","this","chords","chordsData","localStorage","getItem","chordsPermutations","getChordsPermutations","setItem","JSON","stringify","parse","firstChord","_ref","secondChord","changes","newData","map","item","push","Number","slice","Math","max","length","chord","getChords","filter","a","b","data","Chord","getChordsInRightOrder","_this","props","showAll","selected","_this$props","askChordChanges","_this$getChordsInRigh","chordObject","react_default","createElement","onClick","bind","className","React","Component","Header","showCombinationsForOneChord","getCombinationsForChord","setChords","setShowAll","showAllChords","handleTimer","timerIsOn","handleTimerStop","handleTimerStart","setTimerOn","timerButtonString","options","chordsList","key","value","name","onChange","handleSelectChange","Timer","time","seconds","App","state","countDownSeconds","timer","title","concat","swal","content","buttons","then","setChord","setState","event","target","show","decrementSeconds","clearInterval","setInterval","_this2","components_Chord","assign","components_Header","Timer_Timer","id","renderChords","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.398fe4b4.chunk.js","sourcesContent":["class ChordsManager {\r\n  constructor() {\r\n    this.chords = [\r\n      'E',\r\n      'A',\r\n      'D',\r\n      'Am',\r\n      'Em',\r\n      'Dm',\r\n      'C7',\r\n      'G7',\r\n      'D7',\r\n      'A7',\r\n      'E7',\r\n      'B7',\r\n      'G',\r\n      'C',\r\n      'F7',\r\n      'Full F',\r\n      'mini F',\r\n      'Full G',\r\n      'Rock G',\r\n      'Folk G',\r\n      'D/F#',\r\n      'G/B',\r\n      'C/G'\r\n    ];\r\n  }\r\n\r\n  getChords() {\r\n    const chordsData = localStorage.getItem('chordsData');\r\n    if (chordsData === null) {\r\n      const chordsPermutations = this.getChordsPermutations();\r\n      localStorage.setItem('chordsData', JSON.stringify(chordsPermutations));\r\n      return chordsPermutations;\r\n    }\r\n    return JSON.parse(chordsData);\r\n  }\r\n\r\n  setChord({ firstChord, secondChord, changes }) {\r\n    const chordsData = JSON.parse(localStorage.getItem('chordsData'));\r\n    if (chordsData !== null) {\r\n      const newData = chordsData.map(item => {\r\n        const foundChord =\r\n          item.firstChord === firstChord && item.secondChord === secondChord;\r\n        if (foundChord) {\r\n          item.changes.push(Number(changes));\r\n          item.changes = item.changes.slice(\r\n            Math.max(item.changes.length - 7, 0)\r\n          );\r\n        }\r\n        return item;\r\n      });\r\n      localStorage.setItem('chordsData', JSON.stringify(newData));\r\n    }\r\n  }\r\n\r\n  getCombinationsForChord(chord) {\r\n    const allChords = this.getChords();\r\n    const result = allChords.filter(item => {\r\n      return item.firstChord === chord || item.secondChord === chord;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  getChordsPermutations() {\r\n    const chordsPermutations = [];\r\n    for (let a = 0; a < this.chords.length - 1; a++) {\r\n      for (let b = a + 1; b < this.chords.length; b++) {\r\n        const data = {\r\n          firstChord: this.chords[a],\r\n          secondChord: this.chords[b],\r\n          changes: [0]\r\n        };\r\n        chordsPermutations.push(data);\r\n      }\r\n    }\r\n    return chordsPermutations;\r\n  }\r\n}\r\n\r\nexport const chordsManager = new ChordsManager();\r\n","import React from 'react';\r\n\r\nclass Chord extends React.Component {\r\n  getChordsInRightOrder = () => {\r\n    if (!this.props.showAll && this.props.selected !== this.props.firstChord) {\r\n      return {\r\n        firstChord: this.props.secondChord,\r\n        secondChord: this.props.firstChord\r\n      };\r\n    }\r\n    return {\r\n      firstChord: this.props.firstChord,\r\n      secondChord: this.props.secondChord\r\n    };\r\n  };\r\n\r\n  render() {\r\n    const { askChordChanges, changes } = this.props;\r\n    const { firstChord, secondChord } = this.getChordsInRightOrder();\r\n    const chordObject = {\r\n      firstChord: this.props.firstChord,\r\n      secondChord: this.props.secondChord\r\n    };\r\n    return (\r\n      <p onClick={askChordChanges.bind(this, chordObject)} className=\"chord\">\r\n        {firstChord} - {secondChord} ({changes[changes.length - 1]})\r\n      </p>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chord;\r\n","import React from 'react';\r\nimport { chordsManager } from '../common/chord-manager';\r\n\r\nclass Header extends React.Component {\r\n  showCombinationsForOneChord = () => {\r\n    const chords = chordsManager.getCombinationsForChord(this.props.selected);\r\n    this.props.setChords(chords);\r\n    this.props.setShowAll(false);\r\n  };\r\n\r\n  showAllChords = () => {\r\n    const chords = chordsManager.getChords();\r\n    this.props.setChords(chords);\r\n    this.props.setShowAll(true);\r\n  };\r\n\r\n  handleTimer = () => {\r\n    const timerIsOn = this.props.timerIsOn;\r\n    if (timerIsOn) {\r\n      this.props.handleTimerStop();\r\n    } else {\r\n      this.props.handleTimerStart();\r\n    }\r\n    this.props.setTimerOn(!timerIsOn);\r\n  };\r\n\r\n  render() {\r\n    const timerButtonString = this.props.timerIsOn\r\n      ? 'Cancel One Minute Timer'\r\n      : 'Start One Minute Timer';\r\n    const options = this.props.chordsList.map(chord => {\r\n      return (\r\n        <option key={chord} value={chord} name={chord}>\r\n          {chord}\r\n        </option>\r\n      );\r\n    });\r\n    return (\r\n      <header>\r\n        <h1 className=\"chordsTitle\"> Chord Changes </h1>\r\n        <h2 className=\"chordsSubtitle\">\r\n          Overall: {this.props.chordsList.length} chords\r\n        </h2>\r\n        <ul className=\"navigation\">\r\n          <select\r\n            onChange={this.props.handleSelectChange}\r\n            className=\"chordsList\"\r\n          >\r\n            {options}\r\n          </select>\r\n          <li>\r\n            <button onClick={this.showCombinationsForOneChord}>\r\n              Show All Permutations For The Selected Chord\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button onClick={this.showAllChords}>\r\n              Show All Permutations For All Chords\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button onClick={this.handleTimer}>{timerButtonString}</button>\r\n          </li>\r\n        </ul>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nexport default class Timer extends React.Component {\r\n  render() {\r\n    const time = this.props.seconds;\r\n    if (!this.props.timerIsOn) {\r\n      return null;\r\n    }\r\n    return (\r\n      <div className=\"timer__time\">\r\n        <span>{time}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport swal from 'sweetalert';\r\nimport { chordsManager } from './common/chord-manager';\r\nimport Chord from './components/Chord';\r\nimport Header from './components/Header';\r\nimport Timer from './components/Timer';\r\nimport './index.css';\r\nclass App extends Component {\r\n  state = {\r\n    chords: chordsManager.getChords(),\r\n    selected: 'E',\r\n    showAll: true,\r\n    timerIsOn: false,\r\n    seconds: this.countDownSeconds\r\n  };\r\n  timer = null;\r\n\r\n  countDownSeconds = 65;\r\n\r\n  askChordChanges = ({ firstChord, secondChord }) => {\r\n    const title = `Write your chord changes for ${firstChord}-${secondChord}`;\r\n    swal(title, {\r\n      content: 'input',\r\n      buttons: true\r\n    }).then(changes => {\r\n      chordsManager.setChord({ firstChord, secondChord, changes });\r\n      const chords =\r\n        this.state.selected === 'all'\r\n          ? chordsManager.getChords()\r\n          : chordsManager.getCombinationsForChord(this.state.selected);\r\n      this.setState({ chords });\r\n    });\r\n  };\r\n\r\n  setChords = chords => {\r\n    this.setState({ chords });\r\n  };\r\n\r\n  handleSelectChange = event => {\r\n    this.setState({\r\n      selected: event.target.value\r\n    });\r\n  };\r\n\r\n  setShowAll = show => {\r\n    this.setState({\r\n      showAll: show\r\n    });\r\n  };\r\n\r\n  setTimerOn = value => {\r\n    this.setState({\r\n      timerIsOn: value\r\n    });\r\n  };\r\n\r\n  renderChords() {\r\n    return this.state.chords.map(item => {\r\n      const key = `${item.firstChord}-${item.secondChord}`;\r\n      return (\r\n        <Chord\r\n          selected={this.state.selected}\r\n          showAll={this.state.showAll}\r\n          askChordChanges={this.askChordChanges}\r\n          key={key}\r\n          {...item}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  decrementSeconds = () => {\r\n    if (this.state.seconds === 1) {\r\n      clearInterval(this.timer);\r\n      swal('Time Is Up!');\r\n      this.setTimerOn(false);\r\n      this.setState({ seconds: this.countDownSeconds });\r\n    } else {\r\n      this.setState({\r\n        seconds: this.state.seconds - 1\r\n      });\r\n    }\r\n  };\r\n\r\n  handleTimerStart = () => {\r\n    this.decrementSeconds();\r\n    this.timer = setInterval(this.decrementSeconds, 1000);\r\n    this.setState({ seconds: this.countDownSeconds });\r\n  };\r\n\r\n  handleTimerStop = () => {\r\n    clearInterval(this.timer);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Header\r\n          handleSelectChange={this.handleSelectChange}\r\n          selected={this.state.selected}\r\n          setChords={this.setChords}\r\n          setShowAll={this.setShowAll}\r\n          setTimerOn={this.setTimerOn}\r\n          timerIsOn={this.state.timerIsOn}\r\n          handleTimerStart={this.handleTimerStart}\r\n          handleTimerStop={this.handleTimerStop}\r\n          chordsList={chordsManager.chords}\r\n        />\r\n        <Timer seconds={this.state.seconds} timerIsOn={this.state.timerIsOn} />\r\n        <div id=\"chords\">{this.renderChords()}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}